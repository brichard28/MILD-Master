% Benjamin Richardson
% Created: September 16th, 2024

% Script to analyze behavioral sensitivity (d-prime) for MILD MASTER

BehaviorTable = readtable('C:\Users\benri\Documents\GitHub\MILD-Master\RESULTS DATA\MILD-MASTER Behavior Files\mild-master.xlsx','Format','auto');

%subject_ID = char('itd_pilot1','itd_pilot2','itd_pilot3','itdpilot_4_5','itd_pilot5'); % itd pilot
subject_ID = char('mild_master_1','mild_master_2');
num_conditions = 8;

all_hits = zeros(size(subject_ID,1),num_conditions);
all_FAs = zeros(size(subject_ID,1),num_conditions);
all_objects = zeros(size(subject_ID,1),num_conditions);
all_num_target_bash = zeros(size(subject_ID,1),num_conditions);
all_num_masker_bash = zeros(size(subject_ID,1),num_conditions);

% all_maskers = {'side=r_itd=100_az=0_mag=0',...
% 'side=l_itd=50_az=0_mag=0',...
% 'side=l_itd=100_az=0_mag=0',...
% 'side=l_itd=200_az=0_mag=0',...
% 'side=r_itd=400_az=0_mag=0',...
% 'side=r_itd=200_az=0_mag=0',...
% 'side=r_itd=50_az=0_mag=0',...
% 'side=l_itd=400_az=0_mag=0'}; % itd pilot

% all_maskers = {'side=r_itd=0_az=10_mag=1',...
% 'side=l_itd=0_az=10_mag=0',...
% 'side=l_itd=0_az=10_mag=1',...
% 'side=l_itd=0_az=60_mag=0',...
% 'side=r_itd=0_az=60_mag=1',...
% 'side=r_itd=0_az=60_mag=0',...
% 'side=r_itd=0_az=10_mag=0',...
% 'side=l_itd=0_az=60_mag=1'}; % ild pilot

all_maskers = {'side=l_itd=0_az_itd=0_az=5_mag=0_lpf=0',...
'side=l_itd=0_az_itd=0_az=15_mag=0_lpf=0',...
'side=l_itd=0_az_itd=5_az=0_mag=0_lpf=0',...
'side=r_itd=0_az_itd=0_az=5_mag=0_lpf=0',...
'side=r_itd=0_az_itd=0_az=15_mag=0_lpf=0',...
'side=r_itd=0_az_itd=15_az=0_mag=0_lpf=0',...
'side=r_itd=0_az_itd=5_az=0_mag=0_lpf=0',...
'side=l_itd=0_az_itd=15_az=0_mag=0_lpf=0'}; % ild pilot

fs = 44100;
cue_dur = 1.5;

for isubject = 1:size(subject_ID,1) % For each subject...
    disp(string(subject_ID(isubject,:)))
    clicks_not_counted = 0;
    total_clicks = 0;

    % Load the word times for this subject
    WordTimesTable = readtable("C:\Users\benri\Documents\GitHub\MILD-Master\RESULTS DATA\MILD-MASTER Behavior Files\mild-master__s_" + strtrim(string(subject_ID(isubject,:))) + "__Word_Times.csv");

    run_count_per_condition = -1*ones(1,num_conditions); % array to keep track of which run in each condition we are on

    % Find the rows associated with this subject
    rows_this_subject = find(BehaviorTable.S == strtrim(string(subject_ID(isubject,:))));


    % For each trial....
    for itrial = 1:length(rows_this_subject)

        this_trial_condition = BehaviorTable.Condition(rows_this_subject(itrial)); % find the condition for this trial
        this_trial_masker = BehaviorTable.masker(rows_this_subject(itrial)); % find the masker type for this trial
        run_count_per_condition(string(all_maskers) == string(this_trial_masker)) = run_count_per_condition(string(all_maskers) == string(this_trial_masker)) + 1;

        this_trial_run = run_count_per_condition(string(all_maskers) == string(this_trial_masker)); % find how many runs of this condition have happened already
        this_trial_click_times = table2array(BehaviorTable(rows_this_subject(itrial),8:end)); % find the click times for this trial
        this_trial_click_times(isnan(this_trial_click_times)) = []; % remove NaN from these click times
        this_trial_click_times = this_trial_click_times/1000;
        % remove double clicks
        click_distances = diff(this_trial_click_times);
        click_distances_to_remove = find(click_distances < 0.2);
        this_trial_click_times(click_distances_to_remove + 1) = [];

        which_soundfile_this_trial = BehaviorTable.Soundfile(rows_this_subject(itrial));
        which_soundfile_this_trial = cell2mat(which_soundfile_this_trial);
        slash_indices = find(which_soundfile_this_trial == '/');
        slash_index = max(slash_indices);
        which_soundfile_this_trial = which_soundfile_this_trial(slash_index + 1:slash_index + 3);
        if contains(which_soundfile_this_trial, '__')
            which_soundfile_this_trial = str2num(which_soundfile_this_trial(1));
        elseif contains(which_soundfile_this_trial,'_')
            which_soundfile_this_trial = str2num(which_soundfile_this_trial(1:2));
        else
            which_soundfile_this_trial = str2num(which_soundfile_this_trial);
        end
        %disp(which_soundfile_this_trial)


        this_trial_target_all = WordTimesTable(string(WordTimesTable.Var1) == append(string(which_soundfile_this_trial),"_",this_trial_masker) & string(WordTimesTable.Var3) == 'Target',4:end);
        this_trial_target_words = table2array(this_trial_target_all(:,1:2:end));
        this_trial_target_times = (table2array(this_trial_target_all(:,2:2:end)) ./ fs) + cue_dur; % have to add cue back in

        this_trial_masker_all = WordTimesTable(string(WordTimesTable.Var1) == append(string(which_soundfile_this_trial),"_",this_trial_masker) & string(WordTimesTable.Var3) == 'Masker',4:end);
        this_trial_masker_words = table2array(this_trial_masker_all(:,1:2:end));
        this_trial_masker_times = (table2array(this_trial_masker_all(:,2:2:end)) ./ fs) + cue_dur;

        % Store number of color words in the target and masker
        all_num_target_bash(isubject,string(all_maskers) == string(this_trial_masker)) = all_num_target_bash(isubject,string(all_maskers) == string(this_trial_masker)) + sum(this_trial_target_words == "bash");
        all_num_masker_bash(isubject,string(all_maskers) == string(this_trial_masker)) = all_num_masker_bash(isubject,string(all_maskers) == string(this_trial_masker)) + sum(this_trial_masker_words == "bash");
        
        % Find just color times in target and masker
        this_trial_target_bash_times = this_trial_target_times(this_trial_target_words == "bash");
        this_trial_masker_bash_times = this_trial_masker_times(this_trial_masker_words == "bash");
      
       %% Hit and False Alarm Windows

       threshold_window_start = 0.2; %0.2
       threshold_window_end =  0.8; % 1.0
       tVec = 0:1/44100:16;
       hit_windows = zeros(1,length(tVec)); % create an empty array to define hit windows
       FA_windows = zeros(1,length(tVec)); % create an empty array to define false alarm windows

        % specify hit windows
        for i = 1:length(this_trial_target_bash_times) % for each of the current target color times...
            [~,start_index_hit_window] = min(abs(tVec - (this_trial_target_bash_times(i)+threshold_window_start))); % ...the hit window will start threshold_window_start seconds after the word onset
            [~,end_index_hit_window] = min(abs(tVec - (this_trial_target_bash_times(i)+threshold_window_end))); % ...the hit window will end threshold_window_end seconds after the word onset

            hit_windows(start_index_hit_window:end_index_hit_window) = 1; % a value of 1 in the vector hit_windows indicate an area where, if a click falls, it will be counted as a hit
        end

        % specify false alarm windows
        for i = 1:length(this_trial_masker_bash_times) % for each of the current masker times...
            [~,start_index_FA_window] = min(abs(tVec - (this_trial_masker_bash_times(i)+threshold_window_start))); % ...the false alarm window will start threshold_window_start seconds after the word onset
            [~,end_index_FA_window] = min(abs(tVec - (this_trial_masker_bash_times(i)+threshold_window_end))); % ...the false alarm window will end threshold_window_end seconds after the word onset

            if any(hit_windows(start_index_FA_window:end_index_FA_window) == 1)
                continue
            else
                FA_windows(start_index_FA_window:end_index_FA_window) = 1;
            end
        end

        test_vector(itrial,:) = FA_windows + hit_windows;

        % ...Calculate the hit rate, FA rate in this trial
        for iclick = 1:length(this_trial_click_times)

            [~,current_click_index] = min(abs(tVec - this_trial_click_times(iclick))); % ...find the time index of that click...

            if hit_windows(current_click_index) == 1 % ...if that click falls within a hit window...
                all_hits(isubject,string(all_maskers) == string(this_trial_masker)) = all_hits(isubject,string(all_maskers) == string(this_trial_masker)) + 1;
            elseif FA_windows(current_click_index) == 1 %...otherwise if that click falls within a false alarm window...
                all_FAs(isubject,string(all_maskers) == string(this_trial_masker)) = all_FAs(isubject,string(all_maskers) == string(this_trial_masker)) + 1;
            else% ...if the click is not counted as either
                clicks_not_counted = clicks_not_counted + 1;
            end
            total_clicks = total_clicks + 1;
        end

        % associate it with the correct condition

        
    end

disp(append(string(subject_ID(isubject,:)),': ', num2str((clicks_not_counted/total_clicks)*100), '% of clicks not counted'))
end

%% NEW ORDER = itd50 noise, itd500 noise, ildnat noise, ild10 noise, itd50 speech, itd500 speech, ildnat speech, ild10 speech

if ismember()

all_maskers = {'side=l_itd=0_az_itd=0_az=5_mag=0_lpf=0',...
'side=l_itd=0_az_itd=0_az=15_mag=0_lpf=0',...
'side=l_itd=0_az_itd=5_az=0_mag=0_lpf=0',...
'side=r_itd=0_az_itd=0_az=5_mag=0_lpf=0',...
'side=r_itd=0_az_itd=0_az=15_mag=0_lpf=0',...
'side=r_itd=0_az_itd=15_az=0_mag=0_lpf=0',...
'side=r_itd=0_az_itd=5_az=0_mag=0_lpf=0',...
'side=l_itd=0_az_itd=15_az=0_mag=0_lpf=0'}; % ild pilot


all_hits_collapsed_left_and_right = [];
all_hits_collapsed_left_and_right(1,:) = sum(all_hits(:,[3,7]),2); % itd50 / ild10
all_hits_collapsed_left_and_right(2,:) = sum(all_hits(:,[6,8]),2); % itd100 / ild10mag
all_hits_collapsed_left_and_right(3,:) = sum(all_hits(:,[1,4]),2); % itd200 /ild60
all_hits_collapsed_left_and_right(4,:) = sum(all_hits(:,[2,5]),2); % itd400 / ild60mag

all_FAs_collapsed_left_and_right = [];
all_FAs_collapsed_left_and_right(1,:) = sum(all_FAs(:,[3,7]),2); % itd50 / ild10
all_FAs_collapsed_left_and_right(2,:) = sum(all_FAs(:,[6,8]),2); % itd100 / ild10mag
all_FAs_collapsed_left_and_right(3,:) = sum(all_FAs(:,[1,4]),2); % itd200 /ild60
all_FAs_collapsed_left_and_right(4,:) = sum(all_FAs(:,[2,5]),2); % itd400 / ild60mag

all_num_target_bash_collapsed_left_and_right = [];
all_num_target_bash_collapsed_left_and_right(1,:) = sum(all_num_target_bash(:,[3,7]),2); % itd50 / ild10
all_num_target_bash_collapsed_left_and_right(2,:) = sum(all_num_target_bash(:,[6,8]),2); % itd100 / ild10mag
all_num_target_bash_collapsed_left_and_right(3,:) = sum(all_num_target_bash(:,[1,4]),2); % itd200 /ild60
all_num_target_bash_collapsed_left_and_right(4,:) = sum(all_num_target_bash(:,[2,5]),2); % itd400 / ild60mag


all_num_masker_bash_collapsed_left_and_right = [];
all_num_masker_bash_collapsed_left_and_right(1,:) = sum(all_num_masker_bash(:,[3,7]),2); % itd50 / ild10
all_num_masker_bash_collapsed_left_and_right(2,:) = sum(all_num_masker_bash(:,[6,8]),2); % itd100 / ild10mag
all_num_masker_bash_collapsed_left_and_right(3,:) = sum(all_num_masker_bash(:,[1,4]),2); % itd200 /ild60
all_num_masker_bash_collapsed_left_and_right(4,:) = sum(all_num_masker_bash(:,[2,5]),2); % itd400 / ild60mag

all_hit_rates = all_hits./all_num_target_bash;
all_hit_rates_collapsed = all_hits_collapsed_left_and_right./all_num_target_bash_collapsed_left_and_right;
all_hit_rates(all_hit_rates == 0) = 0.001;
all_hit_rates(all_hit_rates >= 1) = 0.999;
all_hit_rates_collapsed(all_hit_rates_collapsed == 0) = 0.001;
all_hit_rates_collapsed(all_hit_rates_collapsed >= 1) = 0.999;

all_FA_rates = all_FAs./all_num_masker_bash;
all_FA_rates_collapsed = all_FAs_collapsed_left_and_right./all_num_masker_bash_collapsed_left_and_right;
all_FA_rates(all_FA_rates == 0) = 0.001;
all_FA_rates(all_FA_rates >= 1) = 0.999;
all_FA_rates_collapsed(all_FA_rates_collapsed == 0) = 0.001;

%% D-prime calculation
d_primes_all = norminv(all_hit_rates) - norminv(all_FA_rates);
d_primes_collapsed = [];
d_primes_collapsed(1,:) = mean(d_primes_all(:,[3,7]),2); % itd50 / ild10
d_primes_collapsed(2,:) = mean(d_primes_all(:,[6,8]),2); % itd100 / ild10mag
d_primes_collapsed(3,:) = mean(d_primes_all(:,[1,4]),2); % itd200 /ild60
d_primes_collapsed(4,:) = mean(d_primes_all(:,[2,5]),2); % itd400 / ild60mag

figure;
subplot(1,3,1)
plot(1:4,d_primes_collapsed,'-o')
title("d'")
%xticklabels({'50','100','200','400'})
xticklabels({'10deg','10degMag','60deg','60degMag'})
%xlabel('ITD (us)')
xlabel('Natural ILD (deg)')
subplot(1,3,2)
plot(1:4,all_hit_rates_collapsed,'-o')
ylim([0 1])
title('Hit Rate')
%xticklabels({'50','100','200','400'})
xticklabels({'10deg','10degMag','60deg','60degMag'})
%xlabel('ITD (us)')
xlabel('Natural ILD (deg)')
subplot(1,3,3)
plot(1:4,all_FA_rates_collapsed,'-o')
ylim([0 1])
title('FA Rate')
%xticklabels({'50','100','200','400'})
xticklabels({'10deg','10degMag','60deg','60degMag'})
%xlabel('ITD (us)')
xlabel('Natural ILD (deg)')
%% Save data
save('C:\Users\benri\Documents\GitHub\MILD-Master\RESULTS DATA\MILD-MASTER_Behavior_Results.mat','d_primes_collapsed','d_primes_collapsed','all_hit_rates_collapsed','all_FA_rates_collapsed')

hit_rate_table = array2table(all_hit_rates_collapsed);
writetable(rows2vars(hit_rate_table),'C:\Users\benri\Documents\GitHub\MILD-Master\RESULTS DATA\MILD-MASTER_Hit_Rates.csv')

FA_rate_table = array2table(all_FA_rates_collapsed(5:end,:));
writetable(rows2vars(FA_rate_table),'C:\Users\benri\Documents\GitHub\MILD-Master\RESULTS DATA\MILD-MASTER_FA_Rates.csv')

d_prime_table = array2table(d_primes_collapsed(5:end,:));
writetable(rows2vars(d_prime_table),'C:\Users\benri\Documents\GitHub\MILD-Master\RESULTS DATA\MILD-MASTER_d_primes.csv')